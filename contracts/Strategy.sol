// SPDX-License-Identifier: AGPL-3.0

pragma solidity 0.8.9;

import "./interfaces/IPoolFactory.sol";
import "./interfaces/IPoolMaster.sol";
import "./interfaces/IUniswapV2Router.sol";
import "./libraries/Decimal.sol";
import "./BaseStrategy.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

contract CPStrategy is BaseStrategy {
  using SafeERC20 for IERC20;
  using SafeERC20 for IPoolMaster;
  using Address for address;
  using SafeMath for uint256;
  using Decimal for uint256;

  address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

  IPoolFactory public poolFactory;

  address public cpool;

  address[] public masters;

  address public router;

  constructor(
    address _vault,
    address _factory
  ) BaseStrategy(_vault) {
    require(_factory != address(0), "CBZ");

    poolFactory = IPoolFactory(_factory);

    require(poolFactory.currencyAllowed(address(want)), "CNS"); // Currency want is Not Supported.

    cpool = poolFactory.cpool();
  }

  function name() external view override returns (string memory) {
    return "StrategyClearPoolUSDC";
  }

  function estimatedTotalAssets() public view override returns (uint256) {
    uint256 total = 0;

    for (uint256 i = 0; i < masters.length; i++) {
      IPoolMaster master = IPoolMaster(masters[i]);
      uint256 rate = master.getCurrentExchangeRate();
      uint256 bal = master.balanceOf(address(this));
      uint256 wantAmount = bal.mulDecimal(rate);

      total = total.add(wantAmount);
    }

    return total;
  }

  function prepareReturn(uint256 _debtOutstanding)
    internal
    override
    returns (
      uint256 _profit,
      uint256 _loss,
      uint256 _debtPayment
    )
  {
    // TODO: Do stuff here to free up any returns back into `want`
    // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
    // NOTE: Should try to free up at least `_debtOutstanding` of underlying position

    // Get total debt, total assets (want+idle)
    uint256 totalDebt = vault.strategies(address(this)).totalDebt;
    uint256 totalAssets = estimatedTotalAssets();

    _profit = totalAssets > totalDebt ? totalAssets - totalDebt : 0; // no underflow

    // To withdraw = profit from lending + _debtOutstanding
    uint256 toFree = _debtOutstanding.add(_profit);

    uint256 freed;
    (freed, _loss) = liquidatePosition(toFree);

    _debtPayment = _debtOutstanding >= freed ? freed : _debtOutstanding; // min

    // net out PnL
    if (_profit > _loss) {
        _profit = _profit - _loss; // no underflow
        _loss = 0;
    } else {
        _loss = _loss - _profit; // no underflow
        _profit = 0;
    }
  }

  function adjustPosition(uint256 _debtOutstanding) internal override {
    // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
    // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)
  }

  function liquidatePosition(uint256 _amountNeeded)
    internal
    override
    returns (uint256 _liquidatedAmount, uint256 _loss)
  {
    // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
    // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
    // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

    uint256 totalAssets = want.balanceOf(address(this));
    if (_amountNeeded > totalAssets) {
      _liquidatedAmount = totalAssets;
      _loss = _amountNeeded.sub(totalAssets);
    } else {
      _liquidatedAmount = _amountNeeded;
    }
  }

  function liquidateAllPositions() internal override returns (uint256) {
    // TODO: Liquidate all positions and return the amount freed.
    return want.balanceOf(address(this));
  }

  // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary

  function prepareMigration(address _newStrategy) internal override {
    for (uint256 i = 0; i < masters.length; i++) {
      IPoolMaster master = IPoolMaster(masters[i]);
      uint256 bal = master.balanceOf(address(this));
      if (bal != 0)
        master.safeTransfer(_newStrategy, bal);
    }
  }

  // Override this to add all tokens/tokenized positions this contract manages
  // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
  // NOTE: Do *not* include `want`, already included in `sweep` below
  //
  // Example:
  //
  //    function protectedTokens() internal override view returns (address[] memory) {
  //      address[] memory protected = new address[](3);
  //      protected[0] = tokenA;
  //      protected[1] = tokenB;
  //      protected[2] = tokenC;
  //      return protected;
  //    }
  function protectedTokens()
    internal
    view
    override
    returns (address[] memory)
  {}

  /**
   * @notice
   *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
   *  to `want` (using the native decimal characteristics of `want`).
   * @dev
   *  Care must be taken when working with decimals to assure that the conversion
   *  is compatible. As an example:
   *
   *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
   *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
   *
   * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
   * @return The amount in `want` of `_amtInEth` converted to `want`
   **/
  function ethToWant(uint256 _amtInWei)
    public
    view
    virtual
    override
    returns (uint256)
  {
    if (_amtInWei == 0) {
      return 0;
    }
    address _wantAddress = address(want);
    if (_wantAddress == WETH) {
      return _amtInWei;
    }
    address[] memory path = _getPath(WETH, _wantAddress);
    uint256[] memory amounts = IUniswapV2Router(router).getAmountsOut(_amtInWei, path);
    return amounts[amounts.length - 1];
  }

  function _getPath(address assetIn, address assetOut)
    internal
    view
    returns (address[] memory path)
  {
    if (assetIn == WETH || assetOut == WETH) {
      path = new address[](2);
      path[0] = assetIn;
      path[1] = assetOut;
    } else {
      path = new address[](3);
      path[0] = assetIn;
      path[1] = WETH;
      path[2] = assetOut;
    }
  }

  function _balance(IERC20 token) internal view returns (uint256) {
    return token.balanceOf(address(this));
  }
}
